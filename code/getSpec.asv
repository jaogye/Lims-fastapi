function data = getSpec(conn, typespec)

% This function extracts the specifications for every (product,quality) either for general case or specifil for clients 
if nargin == 0
   typespec= 'CLI' ; 
end

switch typespec
  case 'CLI'
    cols = varColumns(conn, 'db.customerlist' ) ; 
    scols = cols{1} ; 
    for i = 2:length(cols)
        scols = scols + "," + cols{i}  ; 
    end 
    sql = "SELECT "+ scols +" FROM spec s, product p, quality q " ...
      + " WHERE typespec='CLI' and s.product_id=p.id  and s.quality_id=q.id" + ...
      " ORDER BY  Customer, Product, Quality; " ; 
     d  = select( conn, sql ) ;
     dd = table( d.Action, d.Customer, d.Product, d.Quality, d.Status, ...
        d.Certificaat , d.Opm, d.COA, d.Day_COA, d.COC, d.Visual ) ;
     dd.Properties.VariableNames{1} = 'Action' ; 
     dd.Properties.VariableNames{2} = 'Customer' ; 
     dd.Properties.VariableNames{3} = 'Product' ; 
     dd.Properties.VariableNames{4} = 'Quality' ; 
     dd.Properties.VariableNames{5} = 'Status' ; 
     dd.Properties.VariableNames{6} = 'Certificaat' ; 
     dd.Properties.VariableNames{7} = 'Opm' ; 
     dd.Properties.VariableNames{8} = 'COA' ;     
     dd.Properties.VariableNames{9} = 'Day_COA' ; 
     dd.Properties.VariableNames{10} = 'COC' ; 
     dd.Properties.VariableNames{11} = 'Visual' ; 

   case 'GEN'
     cols = varColumns(conn, 'db.spec' ) ; 
     scols = cols{1} ; 
     for i = 2:length(cols)
         scols = scols + "," + cols{i}  ; 
     end
     sql = "SELECT "+ scols +" FROM spec s" + ...
      " left join variable v1 on s.variable1_id=v1.id " + ...
      " left join variable v2 on s.variable2_id=v2.id " + ...
      " left join variable v3 on s.variable3_id=v3.id " + ...       
       ",  product p, quality q " ...
       + "WHERE typespec='GEN' and  s.product_id=p.id and  s.quality_id=q.id " + ...
       " ORDER BY Product, Quality; " ; 
      d = select( conn, sql ) ;
      dd = table( d.Action, d.TDS, d.Product, d.Quality, d.Visual, d.Variable1, d.Variable2, d.Variable3 ) ; 
      dd.Properties.VariableNames{1} = 'Action' ; 
      dd.Properties.VariableNames{2} = 'TDS' ; 
      dd.Properties.VariableNames{3} = 'Product' ; 
      dd.Properties.VariableNames{4} = 'Quality' ; 
      dd.Properties.VariableNames{5} = 'Visual' ; 
      dd.Properties.VariableNames{6} = 'Variable1' ; 
      dd.Properties.VariableNames{7} = 'Variable2' ; 
      dd.Properties.VariableNames{8} = 'Variable3' ;     
    otherwise
      warning('Unexpected type specification.')
end

if isempty(d)
   data = dd ; 
   return ; 
end    

[indexCols, tests, ~] = getSpecVariables(conn, d) ;  
x = {} ; 
for i=1:height(d)
    for j = 1:height(tests)
        if tests.typevar(j) == "I"                       
           x{i,j} = getStringInterval( d{i, indexCols{j,1}} , d{i, indexCols{j,2}} ) ;
        else
           % Value from a list 
           x{i,j} = d{i, indexCols{j,1}} ;   
        end   
    end
end 

tx = cell2table(x) ; 
for i = 1:height(tests)
    tx.Properties.VariableNames{i} = tests.shortname{i};
end

id = table(d.id ) ;
id.Properties.VariableNames{1} = 'id' ; 

data = [dd, tx, id ] ; 

end

function s = getStringInterval( x1, x2 )
    s = "" ;     
    if not( class(x1) == "cell" 
    end    
    if class(x1) == "cell" && class(x2) == "cell" 
       if not( string(strtrim(x1)) == "") && not( string(strtrim(x2)) == "" )
          s = string(strtrim(x1))+'-'+string(strtrim(x2)) ; 
       end    
    end 
end

function s = getStringInterval2( x1, x2 )    
    s1 = '' ; 
    if not( isnan( x1 ))
       s1 =  num2str( x1 ) ;
    end 
    s2 = '' ; 
    if not( isnan( x2 ))
       s2 =  num2str( x2 )  ;
    end
    s = strcat(s1,  '-' , s2 ) ;
    if x1 == -1 && x2 == -1  
       s = '@' ; 
    end
    if isnan(x1) && isnan(x2)
       s = '' ; 
    end
end